---
title: "**Transferring data to and from Gadi**"
output:
  html_document:
    toc: false
    toc_float: false
from: markdown+emoji
---
## Introduction
 
In this section, we will <TBC>.  
 
The main challenges users may face adapting Artemis workflows to Gadi are:
 
- Adjusting PBS directives to suit Gadi requirements and queue structure
- Lack of internet access for Gadi compute nodes
- [Data transfer](./05_data_transfer.qmd)
- [Gadi walltime limit of 48 hours](./12_walltime.qmd)
- [Understanding NCI accounting of KSU, disk and iNode limits](./06_accounting.qmd)
- [Automatic 100-day Gadi /scratch purge policy](https://opus.nci.org.au/spaces/Help/pages/241926268/Recover+Files...#RecoverFiles...-RecoverQuarantinedFilesonscratch)
- [Software installation and version upgrades on Gadi](./11_software.qmd)
- [Job arrays not supported on Gadi](./13_parralel_jobs.qmd)
 
In this section, we will look at <TBC>. For the remaining challenges, please visit the specific linked content. We will run training sessions on some of these during the lead up to the Artemis decomission date.

## Where to put project files on Gadi

On Gadi (like on Artemis) you have access to a number of different storage areas for project files and data. Check the [NCI User Guides](https://opus.nci.org.au/spaces/Help/pages/236880086/Gadi+Resources...) for more detailed information. Here we provide a brief introduction for those falimiar with Artemis.

Each space is intended for use in a specific way:

#### Home

Your home space (`/home/<username>`) is owned by you and has 10 GiB of available space and this cannot be increased. It works similarly to your /home space on Artemis and should only be used to store things like program code, batch scripts or software configuration information. Note that space is extremely limited here and it is unadvisable to use this space for storing project data.

#### g/data

Your `/g/data` space (`/g/data/<project_id>`) is owned by your project and has the available space allocated by the Sydney Scheme Manager. It is equivalent to `/project` on Artemis. The data are not backed up but they persist for the lifetime of your project. `/g/data` is inteded to be used to store longer term files that are reqularly used by your project during its lifetime. Always ensure your data is regularly backed up from here to the Research Data Store. `/g/data` may be accessed directly from PBS job scripts by using the `-lstorage` PBS directive in your PBS script.

#### Scratch

Your scratch space (`/scratch/<project_id>`) is owned by your project and has 1 TiB of available space which can be increased upon request. It is equivalent to `/scratch` on Artemis. Data are not backed up and files not accessed for 100 days will be quarantined for 14 days and then removed. Scratch should be used for temporary files associated with a job that has large data IO and not for longer term storage. Always ensure any data you need from a job that is left in /scratch is promptly backed up to the Research Data Store.

To check the amount of disk space you have available in the data areas listed above you can use:

```bash
$ lquota
```

## Research data store (RDS)

The RDS is NOT being decommisioned along with Artemis HPC. Any RDS projects you currently have will persist on RDS. It is your responsibility to backup any data on Artemis filesystems (`/home`, `/scratch`, `/project`) that you wish to keep prior to the decomission date of August 29 2025. For information on how to go about this see the 
[SIH Artemis Training Series](https://sydney-informatics-hub.github.io/training.artemis.rds/04-rcos2hpc/index.html).

In this section, we will mainly focus on how to transfer data between Gadi HPC and RDS. You should be able follow similar methods for copying data between your own laptop/server and Gadi.

## Data transfer options

All data transfer to and from Gadi should be made using the "Data Mover Node" at `gadi-dm.nci.org.au` rather than the login nodes. This ensures that data transfer will not consume resources on the otherwise limited login nodes.

### Globus - COMING SOON

In the coming months, [Globus](https://sydneyuni.atlassian.net/wiki/spaces/RC/pages/3492052996/Globus+Data+Transfer) will be available for simplified and efficient data transfer. We will provide training and materials on this once available.

In the meantime, the below options are available, and detailed examples for each method are provided in the subsequent sections.

### Transfer using RDS mapped network drive and data transfer client

For smaller files or datasets, you can map your RDS project as a network drive and transfer the data to Gadi via an intermediate data transfer client GUI such as `filezilla` or `cyberduck`.

While simple to use, these are not recommended for large data transfers, as the local computer becomes a bottleneck and they are generally not resumeable after interruption. Faster speeds will be obtained if you are on campus, but still this method may be prohibitively slow for larger datasets.

::: {.callout-tip}
## Example using `cyberduck`

The following are instructions using the `cyberduck` data transfer client. The process using `filezilla` is similar with the same username the same username and server IP address as shown in this example.

To mount your RDS drive in either Windows or MacOS, please follow the instructions described [here](https://sydneyuni.atlassian.net/wiki/spaces/RC/pages/228589620/Research+Data+Store). You should have a File Explorer (Windows) or Finder (MacOS) window open and displaying the files and folders in your RDS project directory.

Next download `cyberduck` from https://cyberduck.io and open it and connect to Gadi:

  1. Click on the `Open Connection` icon at the top of the window.
  2. Select **SFTP (SSH File Transfer Protocol)** from the drop-down menu at the top of box.
  3. In the **Server** field, enter `gadi-dm.nci.org.au`.
  4. In the **Username** field, enter your **NCI Username**.
  5. In hte **Password** field, enter your **NCI password**.
  6. Click **Connect**.
  7. If an **Unknown fingerprint** box appears, click the **Always** check box in the lower-left hand corner, then click **Allow**.

If you have successfully logged in, you will see a directory listing of `/home/<user login>`. You can browse to your project folder either in `/scratch` or `/g/data` by pressing `Ctrl + g` and then typing `/scratch/<project id>` or `/g/data/<project id>`.

You can then transfer data to and from RDS and NCI by dragging and dropping files between your computer’s file explorer and the Cyberduck window.

:::

### Transfer from ssh connection to RDS

You can also initiate the transfer on the command line by `ssh` to either `research-data-ext.sydney.edu.au` (off-campus) or `research-data-int.sydney.edu.au` (on campus or USyd VPN) then using typical transfer commands such as `rsync` or `scp`. Since the connection will be terminated if your computer sleeps, terminal crashes, network drops out etc, this method is not particualrly robust for large transfers. Using something like `tmux` or `screen` can help, however note that the login server has finite capacity, and transfer speeds can be seriously impacted during times of high load. 

### Transfer using sftp from Gadi copyq

The data transfer queue on Gadi is called `copyq`. This is comparable to the data transfer queue on Artemis `dtq`. Data transfer methods/scripts that you used to put data onto Artemis for example from the web via `wget` or from another server should be easily portable to use on Gadi's `copyq`. 

Please note that the compute nodes on Gadi **do not have** internet access like the Artemis compute nodes do, so all required data must first be downloaded before submitting a compute job that requries the data.  

Due to stringent security settings around Artemis and RDS, commands like `rsync` or `scp` **cannot** be initiated from NCI Gadi login nodes or `copyq`. To initiate the transfer from Gadi, `sftp` must be used.  One can `rsync` or `scp` from Artemis login nodes or using `dtq` to Gadi, however this option will of course cease when Artemis is decomissioned. 

### Transfer using rsync from Artemis dtq - PRIOR TO DECOMISSION ONLY

For transfer of large files directly from Artemis to Gadi, the use of resumable `rsync` is recommended (see script below). As the USyd RDS servers only allow sftp connections, this method is not possible to run on Gadi’s `copyq`. Instead, the transfer can be initiated using Artemis `dtq` and using Gadi’s data mover node: `gadi-dm.nci.org.au`. After the decomisison of Artemis, Globus will provide fast and reliable large data transfers. 

# Examples of the above transfer methods

## Transfer using RDS mapped network drive and data transfer client

Instructions for transferring a small amount of data by mounting RDS as a network drive and copying the data using a the `cyberduck` data transfer client (The process using `filezilla` is similar using the same username and server address as shown in the list below).

To mount your RDS drive in either Windows or MacOS, please follow the instructions described [here](https://sydneyuni.atlassian.net/wiki/spaces/RC/pages/228589620/Research+Data+Store). You should have a File Explorer (Windows) or Finder (MacOS) window open and displaying the files and folders in your RDS project directory.

Next download `cyberduck` from https://cyberduck.io and open it and connect to Gadi:

  1. Click on the `Open Connection` icon at the top of the window.
  2. Select **SFTP (SSH File Transfer Protocol)** from the drop-down menu at the top of box.
  3. In the **Server** field, enter `gadi-dm.nci.org.au`.
  4. In the **Username** field, enter your **NCI Username**.
  5. In hte **Password** field, enter your **NCI password**.
  6. Click **Connect**.
  7. If an **Unknown fingerprint** box appears, click the **Always** check box in the lower-left hand corner, then click **Allow**.

If you have successfully logged in, you will see a directory listing of `/home/<user login>`. You can browse to your project folder either in `/scratch` or `/g/data` by pressing `Ctrl + g` and then typing `/scratch/<project id>` or `/g/data/<project id>`.

You can then transfer data to and from RDS and NCI by dragging and dropping files between your computer’s file explorer and the Cyberduck window.

## Transfer from ssh connection to RDS

### Data transfer from Artemis (and RDS) to Gadi at the login shell - PRIOR TO DECOMMISION ONLY

Note that this option is only available prior to the commission of Artemis (*when*) - after that date you will have to use either GLOBUS (*preferred?*), or copy data when logged into Gadi (wither at the login shell or using `copyq` scripts)

To transfer data between Artemis and Gadi from the Artemis login shell:

  1. Open a terminal (using the 'Terminal' app on MacOS or the 'Command Prompt' app on Windows and then log into Artemis using ssh:

  ```bash
  ssh <Your UniKey>@hpc.sydney.edu.au
  ```

  2. Copy the data from either `rds`, `project` or `scratch` to a specific location on Gadi, e.g:

  ```bash
  scp -r /rds/PRJ-<Project Short ID>/<Path to File or Folder> <nci login>@gadi-dm.nci.org.au
  ```

  replace `/rds` in the above with `/project` or `/scratch` for your preferred source folder or file.

If you want to copy the other way around (ie. from Gadi /scratch to RDS) then simply reverse the order of the above command in step 2, e.g:

  ```bash
  scp -r <nci login>@gadi-dm.nci.org.au /rds/PRJ-<Project Short ID>/<Path to File or Folder>
  ```

### Data transfer from RDS to Gadi at the login shell:

TBC

e.g:

```bash
sftp -r <Your UniKey>@research-data-ext.sydney.edu.au:/rds/PRJ-<Project Short ID>/<Path to File or Folder> 
```

### Use of screen or tmux

ToDo

include use of screen or tmux

## Set up SSH keys for passwordless data transfer

If you are transferring data directly for example `scp` on the command line or via a transfer client on your local computer, entering a password to initiate the transfer is straightforward. If however you want to transfer via a job submitted to either `copyq` or `dtq`, you will need to set up SSH keys first.

SSH key pairs are used for secure communication between two systems. The pair consists of a **private** key and a **public** key. The **private** key should remain private and only be known by the user. It is stored securely on the user's computer. The **public** key can be shared with any system the user wants to connect to. It is added to the remote system's authorized keys. When a connection is attempted, the remote system uses the public key to create a message for the user's system.

There are many general guides for this online, for example [this one](https://medium.com/@prateek.malhotra004/streamlining-secure-remote-access-a-guide-to-passwordless-ssh-connections-between-linux-servers-8c26bb008af9). For step-by-step instructions on how to set up keys between Gadi and RDS, expand the drop down below. 

::: {.callout-note collapse="true"}
### Click to expand

Follow the below steps carefully to set up SSH keys between RDS and Gadi. Note, **you only need to do this once**.

1. Log into Gadi with your chosen method, e.g: 

```bash
ssh ab1234@gadi.nci.org.au
```

2. Move to your home directory: 

```bash
cd ~
```

3. Make a `.ssh` directory, if you don't already have one: 

```bash
mkdir -p .ssh 
```

4. Set suitable permissions for the `.ssh` directory and move into it:

```bash
chmod 700 .ssh
cd .ssh
```

5. Generate SSH key pair: 

```bash
ssh-keygen
```
Hit enter when prompted, saving the key in `~/.ssh/id_rsa` and enter for NO passphrase. A public key will be located in `~/.ssh/id_rsa.pub` and a private key in `~/.ssh/id_rsa`.

6. Set suitable permissions for the keys:

```bash
chmod 600 id_rsa
chmod 644 id_rsa.pub
```

7. Make an `authorized_keys` file if you don't already have one that can be transferred to USyd's Artemis/RDS system: 

```bash
touch ~/.ssh/authorized_keys
```

7. Copy the contents of the public key file (`~/.ssh/id_rsa.pub`) to the `authorized_keys` file to be transferred to USyd's Artemis/RDS system: 

```bash
cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
```

8. Set permissions for the `authorized_keys` file to be transferred to USyd's Artemis/RDS system: 

```bash
chmod 600 ~/.ssh/authorized_keys
```

9. Connect to USyd's Artemis/RDS system using `lftp` and your unikey:

```bash
lftp sftp://<your-unikey>@research-data-ext.sydney.edu.au
```

Provide your password when prompted. Then make and move into a `.ssh` directory if you don't already have one: 

```bash
mkdir -p ~/.ssh
cd ~/.ssh
```

10. Transfer the `authorized_keys` file from Gadi to USyd's Artemis/RDS system: 

```bash 
put authorized_keys
```

Doing this will transfer authorized_keys on Gadi to your current directory. With lftp, it will look for the file relative to where you launched lftp. You can check where you are on Gadi using:

```bash
local pwd
```

11. Exit your lftp connection to USyd's Artemis/RDS system `ctrl + d` and test the passwordless connection: 

```bash
sftp <your-unikey>@research-data-ext.sydney.edu.au
```

This time, you shouldn't be prompted for a password. You can proceed to transfer data between Gadi and USyd's Artemis/RDS system now on the `copyq`. 

:::


## Transfer using sftp from Gadi copyq

The scripts below use `sftp` to transfer data between RDS and Gadi on the Gadi `copyq`. 

Copies of these scripts have been placed in `/scratch/qc03/data-transfer-scripts/gadi-scripts`. 

Make a copy of these scripts to your `/scratch/<nci-project-code>` or `/home/<nci-user-id>` workspace on Gadi and edit to suit your needs.


TBC

- separate below content into indivdual scripts eg "file_from_rds_to_gadi.pbs", "folder_from_rds_to_gadi.pbs" etc
- make the demo scripts folder (read and write user and group for folder) and change perms for files so read only 
- update below content and put example code for each script below under each relevant subheading 


```bash
cp /g/data/<project>/scripts/transfer.pbs /scratch/<project>/<workspace>
```

Then follow the script and move to that workspace: 
```bash
cd /scratch/<project>/<workspace>

```

You need to edit the script and fill in the following details before using it: 

In the `# PBS` variables part of the script: 

* Provide the -P variable by replacing `<project>` with your Gadi project code for accounting 
* Increase the walltime if you are transferring large files, the limit on this queue is 10 hours
* Alter `-lstorage=scratch/<project>` as required. If you also need to access g/data, you can change this to `scratch/<project>+/gdata/<project>`

In the body of the script: 

* Provide the `remote_user` variable by replacing `<unikey>` with your USyd unikey
* Provide the `remote_host` variable by replacing `<project>` with your USyd Artemis/RDS project code
* Provide the `remote_path` variable by replacing `<path>` with the path to the file or directory you want to transfer, excluding the name of the file or directory to be transferred. This will be provided further down in the script.


**Transfer a file from RDS to Gadi:**

1. Use `file_from_rds_to_gadi.pbs` script
2. Replace variables in `<brackets>` as described above 
3. Provide the RDS file as `remote_file` variable by replacing `<filename>` with the name of the file you want to transfer

```bash
#!/bin/bash

# Transfer a file from RDS to Gadi
#
# Make the following replacements in this file:
# <unikey>:      Your USyd unikey
# <rds_project>: Your RDS project name
# <path>:        The location on RDS of your data
# <filename>:    The name of the file to copy
# <nci_project>: Your NCI project name

#PBS -P <nci_project>
#PBS -N transfer
#PBS -l walltime=04:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/<project_nci>

# Artemis:
remote_user=<unikey>
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-<rds_project>/<path>
remote_file=<filename>

# Gadi:
dest_path=/scratch/<nci_project>/<path>

# Copy file with sftp
sftp ${remote_user}@${remote_host}:${remote_path}/${remote_file} ${dest_path}
```

**Transfer a folder from RDS to Gadi:**

1. Use `folder_from_rds_to_gadi.pbs` script
2. Replace variables in `<brackets>` as described above 
3. Provide the RDS directory as `remote_dir` variable by replacing `<folder>` with the name of the file you want to transfer

```bash
#!/bin/bash

# Transfer a folder from RDS to Gadi
# This will recreate your RDS path (/rds/PRJ-<rds_project>)
# on Gadi in /scratch/<nci_project>

# Make the following replacements in this file:
# <unikey>:      Your USyd unikey
# <rds_project>: Your RDS project name
# <path>:        The location on RDS of your data
# <dirname>:     The name of the folder to copy
# <nci_project>: Your NCI project name

#PBS -P <nci_project>
#PBS -N transfer
#PBS -l walltime=04:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/<nci_project>

# RDS:
remote_user=<unikey>
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-<rds_project>/<path>
remote_dir=<dirname>

# Gadi:
dest_path=/scratch/<nci_project>/<path>

# Copy folder with sftp
sftp -r ${remote_user}@${remote_host}:${remote_path}/${remote_dir} ${dest_path}
```

**To copy a file from Gadi to RDS:**

1. Use `file_from_gadi_to_rds.pbs` script
2. Replace variables in `<brackets>` as described above 
3. Provide the Gadi file as `local_file` variable by replacing `<filename>` with the name of the file you want to transfer

```bash
#!/bin/bash

# Transfer a file from Gadi to RDS

# Make the following replacements in this file:
# <unikey>:      Your USyd unikey
# <rds_project>: Your RDS project name
# <path>:        The location on RDS to put your data
# <filename>:    The file to copy
# <nci_project>: Your NCI project name

#PBS -P <nci_project>
#PBS -N transfer
#PBS -l walltime=04:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/<nci_project>

remote_user=<unikey>
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-<rds_project>/<path>

local_file=<filename>

sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put ${local_file}"
```

**Transfer a folder from Gadi to RDS:**

1. Use `file_from_gadi_to_rds.pbs` script
2. Replace variables in `<brackets>` as described above
3. Log into RDS and make a directory with the same name as the directory you want to transfer from Gadi
4. Provide the Gadi directory as `local_dir` variable by replacing `<folder>` with the name of the file you want to transfer

```bash
#!/bin/bash

# Transfer a folder from Gadi to RDS
#

# Make the following replacements in this file:
# <unikey>:      Your USyd unikey
# <rds_project>: Your RDS project name
# <path>:        The location on RDS to put your folder (Must exist on RDS)
# <folder>:      The folder to copy
# <nci_project>: Your NCI project name

#PBS -P <nci_project>
#PBS -N transfer
#PBS -l walltime=04:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/<nci_project>

remote_user=<unikey>
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-<rds_project>/<path>

local_dir=<folder>

# CAVEAT: this method will only work if directory of the same name exists at destination!
sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put -r ${folder}"
```

### Generic Gadi script for data transfer to and from RDS

Below is a generic script that can handle all cases. Notice that all commands in the script are hashed out. This script can do multiple things, depending on which command is permitted to run (by removing the hash prefix). The header lines above each section describe which command is being run and therefore which direction the data is moving in.  

```bash
#!/bin/bash

# This is a Gadi data transfer script

#PBS -P <project>
#PBS -N transfer
#PBS -l walltime=04:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/<project>

# Remote server details:
remote_user=<unikey>
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-<project>/<path>

# Download a file from RDS to Gadi:
#dest_path=/scratch/<project>/<path>
#remote_file=<filename>
#sftp ${remote_user}@${remote_host}:${remote_path}/${remote_file} ${dest_path} 

# Download a directory from RDS to Gadi:
#dest_path=/scratch/<project>/<path>
#remote_dir=<dirname>
#sftp -r ${remote_user}@${remote_host}:${remote_path}/${remote_dir} ${dest_path} 

# Upload a file from Gadi to RDS:
#local_file=<filename>
#sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put ${local_file}" 

# Upload a directory from Gadi to RDS:
# CAVEAT: this method will only work if directory of the same name exists at destination! 
#local_dir=<dirname>
#sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put -r ${local_dir}" 
```

For example, to download a bam file from RDS to Gadi, I'd only unhash the `Download a file from RDS to Gadi` section: 

```bash
#!/bin/bash

# This is a Gadi data transfer script

#PBS -P aa00
#PBS -N transfer
#PBS -l walltime=10:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/aa00

# Remote server details:
remote_user=gsam0000
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-MYPROJECT/bams

# Download a file from RDS to Gadi:
dest_path=/scratch/aa00/bams
remote_file=sample.bam
sftp ${remote_user}@${remote_host}:${remote_path}/${remote_file} ${dest_path} 

# Download a directory from RDS to Gadi:
#remote_dir=<dirname>
#sftp -r ${remote_user}@${remote_host}:${remote_path}/${remote_dir} ${dest_path} 

# Upload a file from Gadi to RDS:
#local_file=<filename>
#sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put ${local_file}" 

# Upload a directory from Gadi to RDS:
# CAVEAT: this method will only work if directory of the same name exists at destination! 
#local_dir=<dirname>
#sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put -r ${local_dir}" 
```

For example, to download a directory containing multiple `fastq.gz` files from RDS to Gadi, I'd only unhash the `Download a directory from RDS to Gadi` section: 

```bash
#!/bin/bash

# This is a Gadi data transfer script

#PBS -P aa00
#PBS -N transfer
#PBS -l walltime=10:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q copyq
#PBS -l wd
#PBS -lstorage=scratch/aa00

# Remote server details:
remote_user=<unikey>
remote_host=research-data-ext.sydney.edu.au
remote_path=/rds/PRJ-<project>/<path>

# Download a file from RDS to Gadi:
#dest_path=/scratch/<project>/<path>
#remote_file=<filename>
#sftp ${remote_user}@${remote_host}:${remote_path}/${remote_file} ${dest_path} 

# Download a directory from RDS to Gadi:
dest_path=/scratch/aa00/fastqs
remote_dir=/rds/PRJ-MYPROJECT/fastqs/cmt-fastqs
sftp -r ${remote_user}@${remote_host}:${remote_path}/${remote_dir} ${dest_path} 

# Upload a file from Gadi to RDS:
#local_file=<filename>
#sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put ${local_file}" 

# Upload a directory from Gadi to RDS:
# CAVEAT: this method will only work if directory of the same name exists at destination! 
#local_dir=<dirname>
#sftp ${remote_user}@${remote_host}:${remote_path} <<< $"put -r ${local_dir}" 
```

**Run the transfer script**

Once you have customised the script, you can submit it to the `copyq` on Gadi. Run the script from the directory where you saved it: 

```bash
qsub transfer.pbs
```

This can be a nerve-wracking process, especially if you are transferring large files. You can check the status of your job on Gadi using: 

```bash
qstat -Esw
```

Once it says R (running), you can confirm it is going to where you want on RDS/Artemis or Gadi by logging into the system and checking for the presence of the file/directory in its expected location using: 

```bash
ls <path>
```

 **Confirm the transfer**

To confirm the transfer was successful, you'll need to check your joblogs. These are located in the same directory as your script and are named `transfer.o<jobid>`. Check for **Exit status: 0**. If you see this, the transfer was successful. 

However, this doesn't guarantee the integrity of the files. You should check the files themselves to ensure they are intact. You can do this using md5checksums. See this [SIH tidbits blogpost](https://sydney-informatics-hub.github.io/tidbits/safely-downloading-your-sequence-data-to-rds.html) about how to use these. You'll need to create md5checksums for the original files if they don't already exist and compare them after transfer.

## Transfer using rsync from Artemis dtq - PRIOR TO DECOMISSION ONLY

TBC

See my favourite script at https://sydney-informatics-hub.github.io/training.gadi.intro/05-Data-transfer/index.html 

- provide example for single file transfer (as show at above link) - also put in the qc03 demo transfer scripts folder
- provide example for recursive folder transfer (with comment about inclusion or exclusion of trailing slash on source path)
- provide example for job array based transfer 
- provide example for to gadi and from gadi by reversing host/source/dest

```bash
#!/bin/bash

# This is an Artemis data transfer script

#PBS -P <project>
#PBS -N transfer
#PBS -l walltime=04:00:00
#PBS -l ncpus=1
#PBS -l mem=8GB
#PBS -W umask=022
#PBS -q dtq

source_path=/rds/PRJ-<project>/<path>/<file>

destination=<user>@gadi-dm.nci.org.au
destination_path=<path-on-gadi>

while [ 1 ]
do
        echo Transferring ${source_path} to ${destination}:${destination_path}
        rsync -rtlPvz --append-verify ${source_path} ${destination}:${destination_path}

        if [ "$?" = "0" ]
        then
                echo "Rsync completed normally"
                dt=$(date)
                echo Finished transferring at $dt
        exit
        else
                echo "Rsync failure. Backing off and retrying in 3 minutes"
                sleep 180
        fi
done
```
